generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Schema models mirror the Postgres schema for local testing
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  image     String?
  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  squads     SquadMember[]
  absences   Absence[]
  assignments Assignment[]
}

enum UserRole {
  SCRUM_MASTER
  MEMBER
}

model Squad {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  scrumMasterId String

  members   SquadMember[]
  sprints   Sprint[]
  holidays  Holiday[]
}

model SquadMember {
  id        String @id @default(uuid())
  squad     Squad  @relation(fields: [squadId], references: [id])
  squadId   String
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Sprint {
  id        String @id @default(uuid())
  squad     Squad  @relation(fields: [squadId], references: [id])
  squadId   String
  number    Int
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  members   SprintMember[]
  tickets   Ticket[]
}

model SprintMember {
  id        String @id @default(uuid())
  sprint    Sprint @relation(fields: [sprintId], references: [id])
  sprintId  String
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  dailyHours Float @default(7.5)
}

model Holiday {
  id        String @id @default(uuid())
  squad     Squad  @relation(fields: [squadId], references: [id])
  squadId   String
  date      DateTime
  description String?
}

model Absence {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  sprint    Sprint @relation(fields: [sprintId], references: [id])
  sprintId  String
  startDate DateTime
  endDate   DateTime
  hours     Float
  type      AbsenceType
}

enum AbsenceType {
  VACATION
  SICK
  TRAINING
  OTHER
}

model Ticket {
  id         String @id @default(uuid())
  jiraId     String?
  title      String
  estimate   Float
  category   String?
  parentType String?
  sprint     Sprint? @relation(fields: [sprintId], references: [id])
  sprintId   String?
  assignments Assignment[]
}

model Assignment {
  id        String @id @default(uuid())
  ticket    Ticket @relation(fields: [ticketId], references: [id])
  ticketId  String
  sprint    Sprint @relation(fields: [sprintId], references: [id])
  sprintId  String
  assignee  User?  @relation(fields: [assigneeId], references: [id])
  assigneeId String?
  hours     Float
}

model DayAllocation {
  id        String @id @default(uuid())
  date      DateTime
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  hours     Float
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId String?
}

model Invitation {
  id        String @id @default(uuid())
  email     String
  squad     Squad? @relation(fields: [squadId], references: [id])
  squadId   String?
  tokenHash String
  expiresAt DateTime
  status    InvitationStatus @default(PENDING)
  createdAt DateTime @default(now())
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}
